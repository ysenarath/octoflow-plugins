[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "octoflow-plugins"
description = "Streamlining machine learning tracking for seamless experiment management."
readme = "README.md"
requires-python = ">=3.8"
# only license identifier from https://spdx.org/licenses/ allowed
license = "MIT"
# license-files = { paths = ["LICENSE.txt"] }

# keywords for easier look-up on PyPI
keywords = ["tracking", "machine-learning"]
authors = [{ name = "Yasas Senarath", email = "email@example.com" }]
# options under https://pypi.org/classifiers/
classifiers = [ # ToDo: Modify according to your needs!
    "Development Status :: 2 - Pre-Alpha",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: Implementation :: CPython",
]
# direct dependencies of this package, installed when users `pip install octoflow` later.
dependencies = ["octoflow>=0.0.14"]
dynamic = ["version"]

[project.scripts]
# Use `fibonacci` as command-line script, comment or remove this section if not needed.
# fibonacci = "octoflow.skeleton:app"

[project.urls]
# important URLs for this project
# ToDo: Modify according to your needs!
Documentation = "https://github.com/ysenarath/octoflow-plugins"
Source = "https://github.com/ysenarath/octoflow-plugins"
# Tracker = "https://github.com/ysenarath/octoflow/issues"
# Sponsor = "https://github.com/sponsors/ysenarath"

######################
# Build & Versioning #
######################

[tool.hatch.metadata]
# direct dependency references, e.g `pip @ git+https://github.com/pypa/pip.git@master`
allow-direct-references = true

[tool.hatch.version]
path = "src/octoflow_plugins/__init__.py"

# [tool.hatch.build.hooks.vcs]
# version-file = "src/octoflow/_version.py"

[tool.hatch.build]
packages = ["src/octoflow_plugins", "src/octoflow-stubs"]

[tool.hatch.build.targets.sdist]
exclude = ["/.github"]

##################
# External Tools #
##################

[tool.mypy]
files = ["src/octoflow_plugins", "tests"]
disallow_untyped_defs = false
follow_imports = "normal"                 # "silent" for not following
ignore_missing_imports = true
pretty = true
show_column_numbers = true
warn_no_return = false
warn_unused_ignores = true

# [tool.pytest.ini_options]
# minversion = "6.0"
# addopts = "-ra -q --doctest-glob='*.md'"
# testpaths = ["tests"]

# [tool.coverage.run]
# branch = true
# source = ["src/octoflow"]
# omit = []

# [tool.coverage.paths]
# source = ["src/", "*/site-packages/"]

# [tool.coverage.report]
# # Regexes for lines to exclude from consideration
# exclude_lines = [
#     # Have to re-enable the standard pragma
#     "pragma: no cover",
#     # Don't complain about missing debug-only code:
#     "def __repr__",
#     "if self\\.debug",
#     # Don't complain if tests don't hit defensive assertion code:
#     "raise AssertionError",
#     "raise NotImplementedError",
#     # Don't complain if non-runnable code isn't run:
#     "if 0:",
#     "if __name__ == .__main__.:",
#     "if TYPE_CHECKING:",
# ]

[tool.ruff]
extend-include = ["*.ipynb"]
target-version = "py38"
line-length = 120
preview = true # preview features & checks, use with caution
extend-select = [ # features in preview
    "W292", # missing-newline-at-end-of-file
]
include = ["src/**/*.py", "src/**/*.pyi", "tests/**/*.py", "tests/**/*.pyi"]
select = [
    "A",
    "B",
    "C",
    "DTZ",
    "E",
    "EM",
    "F",
    "FBT",    # Boolean trap
    "I",
    "ICN",
    "ISC",
    "N",
    "PLC",
    "PLE",
    "PLR",
    "PLW",
    "Q",
    "RUF",
    "S",
    "SIM",
    "T",
    "TID",
    "UP",
    "W",
    "YTT",
    "RUF100", # Automatically remove unused # noqa directives
]
ignore = [
    # Allow non-abstract empty methods in abstract base classes
    "B027",
    # Allow boolean positional values in function calls, like `dict.get(... True)`
    "FBT003",
    # Ignore checks for possible passwords
    "S105",
    "S106",
    "S107",
    # Ignore complexity
    "C901",
    "PLR0911",
    "PLR0912",
    "PLR0913",
    "PLR0915",
    "PLC1901", # empty string comparisons
    "PLW2901", # `for` loop variable overwritten
    "SIM114",  # Combine `if` branches using logical `or` operator
    "E203",    # Whitespace before :, needed for black compatability and also `ruff format`
    "ISC001",  # causes unexpected behaviour with formatter
    "UP006",
    "UP007",
    "UP008",
    "A001",
    "A002",
    "A003",
    "FBT001",
    "FBT002",
    "PLR0917",
]
unfixable = [
    # "F401",  # Don't touch unused imports
]

[tool.ruff.format]
quote-style = "double" # be more like black

[tool.ruff.isort]
known-first-party = ["octoflow_plugins"]

[tool.ruff.flake8-quotes]
inline-quotes = "double"

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.per-file-ignores]
# Allow print/pprint
"examples/*" = ["T201"]
# Tests can use magic values, assertions, and relative imports
"tests/**/*" = ["PLR2004", "S101", "TID252"]

[tool.ruff.lint.pydocstyle]
convention = "numpy" # Accepts: "google", "numpy", or "pep257".
